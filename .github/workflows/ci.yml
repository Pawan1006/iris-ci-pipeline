name: IRIS CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS }}
      PROJECT_ID: mlops-466312

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Upgrade pip & tools
      - name: Upgrade pip & setuptools
        run: python -m pip install --upgrade pip setuptools wheel

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt --no-cache-dir

      # Step 5: Install DVC
      - name: Install DVC
        run: pip install "dvc[gcs]" --no-cache-dir

      # Step 6: Save and authenticate GCP credentials
      - name: Configure GCP credentials
        run: |
          echo "$GCP_CREDENTIALS_JSON" > gcp-key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV
          sudo apt-get update -qq && sudo apt-get install -y google-cloud-cli
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project $PROJECT_ID

      # Step 7: Configure DVC remote
      - name: Configure DVC remote
        run: |
          dvc remote list || echo "⚠️ No remotes found, skipping list"
          dvc remote modify gcsremote credentialpath $(pwd)/gcp-key.json || true
          dvc remote modify gcsremote gdrive_use_service_account true || true

      # Step 8: Pull data & model
      - name: Pull data & model from DVC
        run: dvc pull -v

      # Step 9: Run evaluation & data validation tests
      - name: Run Pytest tests
        run: |
          pytest tests/ --junitxml=result.xml --tb=short | tee result.txt

      # Step 10: Comment test results via official CML action
      - name: Comment test results via CML
        if: github.event_name == 'pull_request'
        uses: iterative/setup-cml@v2
        with:
          version: latest
      - name: Post CML comment
        if: github.event_name == 'pull_request'
        run: |
          npx cml comment create --file result.txt
